version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
jobs:
  deploy_green:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /usr/local/bin/
            kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name capstone-eks

      - run:
          name: Deploy Green Image
          command: |
            kubectl create deployment green-deploy --image=510590228660.dkr.ecr.us-east-1.amazonaws.com/udacity/capstone:1.0.4 --replicas 1
            kubectl expose deployment/green-deploy --type="LoadBalancer" --port 8080
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: | 
            yum install -y tar
      - run:
          name: Install GZIP
          command: | 
            yum install -y gzip
      - run:
          name: Install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /usr/local/bin/
            kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name capstone-eks
      - run:
          name: Wait for 60 seconds
          command: sleep 60
      - run:
          name: Smoke Test Green deployment
          command: |
            GREEN_BASE_URL=$(kubectl get svc green-deploy -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            GREEN_SERVICE_URL="http://${GREEN_BASE_URL}:8080/status"
            if curl -s ${GREEN_SERVICE_URL} | grep "OK" 
            then
              SMOKE_TEST_SUCCESS=true
              echo "Setting success variable for routing switch"
              echo "Persisting variable: $SMOKE_TEST_SUCCESS"
              echo "$SMOKE_TEST_SUCCESS" > ~/smoke_test_status.txt
            else
              echo "Green Deployment smoke test failed"
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - smoke_test_status.txt
            
  switch_routing:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: | 
            yum install -y tar
      - run:
          name: Install GZIP
          command: | 
            yum install -y gzip
      - attach_workspace:
           at: ~/
      - run:
          name: Install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /usr/local/bin/
            kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name capstone-eks
      - run:
          name: Switch Routing to Green Deployment
          command: |
            SMOKE_TEST_SUCCESS=$(<~/smoke_test_status.txt)
            echo "Reusing persisted variable: $SMOKE_TEST_SUCCESS"
            if [ "$SMOKE_TEST_SUCCESS" == "true" ]; then
                BLUE_SERVICE_NAME="main-service"
                GREEN_SERVICE_NAME="green-deploy"
                # Get the existing blue-deploy service information
                BLUE_SERVICE_INFO=$(kubectl get svc $BLUE_SERVICE_NAME -o json)
                # Update the blue-deploy service selector to match the green-deploy deployment
                kubectl patch svc $BLUE_SERVICE_NAME -p '{"spec":{"selector":{"app":"green-deploy"}}}'
                # Delete the green-deploy LoadBalancer service
                kubectl delete svc $GREEN_SERVICE_NAME
                echo "Routing switched to Green Deployment"
              else
                echo "Smoke test failed, not switching routing"
              fi
  

workflows:
  version: 2
  build_and_deploy:
    jobs:
     - deploy_green
      - smoke_test
          requires:
            - deploy_green
      - switch_routing:
          requires:
            - smoke_test
  